<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="preconnect" href={Routes.static_url(@conn, "/")} />
    <link rel="dns-prefetch" href="https://ghbtns.com" />
    <link rel="dns-prefetch" href="https://api.github.com" />
    <link rel="dns-prefetch" href="https://accounts.google.com" />
    <link rel="shortcut icon" href={Routes.static_url(@conn, "/images/favicon.ico")} />
    <%= if assigns[:include_js] do %>
      <script>
        window.__trackLoadAbandonment = function() {
          document.removeEventListener('visibilitychange', window.__trackLoadAbandonment)
          if (!window.DD_RUM) return; <%# guard against ad blockers %>

          DD_RUM.onReady(function() {
            DD_RUM.addAction("Load Abandoned")
          })
        }

        document.addEventListener("visibilitychange", window.__trackLoadAbandonment)
      </script>
    <% end %>
    <%= if Application.get_env(:remote_retro, :env) == :prod do %>
      <%# Google Analytics %>
      <script async src={"https://www.googletagmanager.com/gtag/js?id=#{Application.get_env(:remote_retro, :google_analytics_id)}"}></script>
      <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', '<%= Application.get_env(:remote_retro, :google_analytics_id) %>');
      </script>

      <%# disable react dev tools in prod to eliminate possible attack vector %>
      <script>
        var hasReactDevToolsExtension = typeof window.__REACT_DEVTOOLS_GLOBAL_HOOK__ === 'object'
        if (hasReactDevToolsExtension) {
           __REACT_DEVTOOLS_GLOBAL_HOOK__.inject = function() {};
        }
      </script>

      <%# HoneyBadger client-side error reporting %>
      <script defer="defer" fetchpriority="high" importance="high" src="https://js.honeybadger.io/v4.0/honeybadger.min.js" type="text/javascript"></script>
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          if (!window.Honeybadger) return; <%# protect against ad blockers %>

          Honeybadger.configure({
            apiKey: '<%= Application.get_env(:honeybadger, :api_key) %>',
            revision: '<%= Application.get_env(:remote_retro, :source_version) %>',
            environment: 'production',
          })
        })
      </script>
    <% else %>
      <%# stub out vendor script funcs in dev/test %>
      <script>
        window.Honeybadger = {
          notify: () => {},
          setContext: () => {},
        }
      </script>
    <% end %>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content={assigns[:description] || "The world's best tool for conducting remote retrospectives"}>
    <meta name="google-site-verification" content="T5W8sjrjt-BmTK5SYTjPM-FQZD8oGNatTNAJSyRex7o" />
    <meta name="author" content="">
    <title><%= assigns[:title] || "RemoteRetro.org | Free. World-class. Agile retrospectives." %></title>

    <link rel="preload" href={Routes.static_url(@conn, "/css/semantic-ui/font/lato-v15-latin-regular.woff2")} as="font" type="font/woff2" crossorigin />
    <link rel="preload" href={Routes.static_url(@conn, "/css/semantic-ui/font/lato-v15-latin-bold.woff2")} as="font" type="font/woff2" crossorigin />
    <link rel="preload" href={Routes.static_url(@conn, "/css/semantic-ui/themes/default/assets/fonts/brand-icons-purged.woff2")} as="font" type="font/woff2" crossorigin />
    <link rel="preload" href={Routes.static_url(@conn, "/css/semantic-ui/themes/default/assets/fonts/icons.woff2")} as="font" type="font/woff2" crossorigin />
    <link rel="prefetch" href={Routes.static_url(@conn, "/css/semantic-ui/font/lato-v15-latin-italic.woff2")} as="font" type="font/woff2" crossorigin />
    <link rel="stylesheet" href={Routes.static_url(@conn, "/css/semantic-ui/semantic-ui-purged.min.css")} />
    <link rel="stylesheet" href={app_css(@conn)}>
    <link rel="apple-touch-icon" href={Routes.static_url(@conn, "/images/apple-touch-icon.png")} />
    <%= if Application.get_env(:remote_retro, :env) == :test do %>
      <!--
        disable css animations in end-to-end tests;
        results in faster, more deterministic builds
      -->
      <style>
        * {
          transition: none !important;
          transition-delay: 1ms !important;
          transition-duration: 1ms !important;
        }
      </style>
    <% end %>
  </head>

  <body class={assigns[:body_class]}>
    <%# Google Tag Manager (noscript) %>
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-K8F6B6H"
    height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    <%# End Google Tag Manager (noscript) %>
    <main role="main">
    <%= unless assigns[:omit_header] do %>
      <div class="ui segment branded-header-container">
        <a href="/">
          <div class="ui teal header left-branded-header">
            <p>RemoteRetro</p>
          </div>
        </a>
        <div class="ui header right-branded-header grid">
          <a href="https://www.stride.build?utm_campaign=RemoteRetro&utm_source=Micro%20Website&utm_medium=remoteretro" target="_blank" class="built-by-wrapper">
            <div class="middle aligned content logo-text">Built by</div>
            <div class="ui tiny image"><img height="21" width="21" src={Routes.static_url(@conn, "/images/stride_logo.png")} alt="Stride" /></div>
          </a>
          <div class="help-icon" id="stage-help-icon"></div>

          <%= if Plug.Conn.get_session(@conn, :current_user_id) do %>
            <a href="/logout" class="ui mini compact logout button">
              Log Out
            </a>
          <% end %>
        </div>
      </div>
    <% end %>
      <%= @inner_content %>
    </main>
    <%= if assigns[:include_js] do %>
      <script>
        window.userToken = "<%= @user_token %>";
        window.retroUUID = "<%= @retro_uuid %>";

        document.addEventListener('DOMContentLoaded', function() {
          if (!Honeybadger) return; // protect against edge-case where honeybadger request fails or gets blocked

          Honeybadger.setContext({
            userToken: window.userToken,
            retroUUID: window.retroUUID,
          });
        })
      </script>
      <script fetchpriority="high" importance="high" src={Routes.static_url(@conn, "/js/dll/dll.vendor.js")}></script>
      <script fetchpriority="high" importance="high" src={app_js(@conn)}></script>
    <% end %>
    <%# DataDog Real user metrics %>
    <script>
      (function(h,o,u,n,d) {
        h=h[d]=h[d]||{q:[],onReady:function(c){h.q.push(c)}}
        d=o.createElement(u);d.async=1;d.src=n
        n=o.getElementsByTagName(u)[0];n.parentNode.insertBefore(d,n)
      })(window,document,'script','https://www.datadoghq-browser-agent.com/datadog-rum-v4.js','DD_RUM')
      DD_RUM.onReady(function() {
        DD_RUM.init({
          clientToken: '<%= Application.get_env(:remote_retro, :datadog_client_token) %>',
          applicationId: '<%= Application.get_env(:remote_retro, :datadog_application_id) %>',
          site: 'datadoghq.com',
          service: 'remoteretro',
          version: '<%= Application.get_env(:remote_retro, :source_version) %>',
          sampleRate: 100,
          trackInteractions: false,
          beforeSend: function(event) {
            const view = event.view;
            const retroSpaHasMounted = view.custom_timings && view.custom_timings.SPA_MOUNTED;

            if (retroSpaHasMounted) {
              const differenceBetweenMountAndLCPinMS = (view.largest_contentful_paint - view.custom_timings.SPA_MOUNTED) / 1000000.0;
              const lcpEntryTriggeredByActionOfAnotherClient = differenceBetweenMountAndLCPinMS > 4000;

              <%# LCP entries are recorded for as long as the user is idle; this means that if the user app is mounted but the user is idle and the facilitator advances the retro, a new misleading LCP event can be recorded due to the banner dropping down on stage-advancement; we tag these entries so can filter them out in DD %>
              DD_RUM.addRumGlobalContext('lcpEntryTriggeredByActionOfAnotherClient', lcpEntryTriggeredByActionOfAnotherClient);
            }
          },
        })
      })
    </script>
  </body>
</html>
